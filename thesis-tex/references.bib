% LINEAR LOGIC
@InProceedings{mazza:LIPIcs.CSL.2015.24,
  author =	{Mazza, Damiano},
  title =	{{Simple Parsimonious Types and Logarithmic Space}},
  booktitle =	{24th EACSL Annual Conference on Computer Science Logic (CSL 2015)},
  pages =	{24--40},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-939897-90-3},
  ISSN =	{1868-8969},
  year =	{2015},
  volume =	{41},
  editor =	{Kreutzer, Stephan},
  publisher =	{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.CSL.2015.24},
  URN =		{urn:nbn:de:0030-drops-54053},
  doi =		{10.4230/LIPIcs.CSL.2015.24},
  annote =	{Keywords: implicit computational complexity, linear logic, geometry of interaction}
}

@InProceedings{10.1007/11874683_40,
author="Sch{\"o}pp, Ulrich",
editor="{\'E}sik, Zolt{\'a}n",
title="Space-Efficient Computation by Interaction",
booktitle="Computer Science Logic",
year="2006",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="606--621",
abstract="We introduce a typed functional programming language for logarithmic space. Its type system is an annotated subsystem of Hofmann's polytime LFPL. To guide the design of the programming language and to enable the proof of logspace-soundness, we introduce a realisability model over a variant of the Geometry of Interaction. This realisability model, which takes inspiration from M{\o}ller-Neergaard and Mairson's work on BC{\$}^{\{}{\backslash}rm --{\}}{\_}{\{}{\backslash}epsilon{\}}{\$}, provides a general framework for modelling space-restricted computation.",
isbn="978-3-540-45459-5"
}

@article{DALLAGO2016150,
title = {Computation by interaction for space-bounded functional programming},
journal = {Information and Computation},
volume = {248},
pages = {150-194},
year = {2016},
note = {Development on Implicit Computational Complexity (DICE 2013)},
issn = {0890-5401},
doi = {https://doi.org/10.1016/j.ic.2015.04.006},
url = {https://www.sciencedirect.com/science/article/pii/S089054011500142X},
author = {Ugo {Dal Lago} and Ulrich Schöpp},
keywords = {Implicit computational complexity, Logarithmic space, Type system, Geometry of interaction, Functional programming},
abstract = {When programming with sublinear space constraints one often needs to use special implementation techniques even for simple tasks, such as function composition. In this paper, we study how such implementation techniques can be supported in a functional programming language. Our approach is based on modelling computation by interaction using the Int construction of Joyal, Street & Verity. We apply this construction to a term model of a first-order programming language and use the resulting structure to derive the functional programming language intml. Intml can be understood as a programming language simplification of Stratified Bounded Affine Logic. We formulate intml by means of a type system inspired by Baillot & Terui's Dual Light Affine Logic. We show that it captures the complexity classes flogspace and nflogspace. We illustrate its expressiveness by showing how typical graph algorithms, such a test for acyclicity in undirected graphs, can be represented.}
}



% OLD IMPLICIT

@article{bloch1994function,
  author    = {Stephen Bloch},
  title     = {Function-algebraic characterizations of log and polylog parallel time},
  journal   = {Computational Complexity},
  volume    = {4},
  number    = {2},
  pages     = {175--205},
  year      = {1994},
  month     = jun,
  doi       = {10.1007/BF01202288},
  url       = {https://doi.org/10.1007/BF01202288},
  issn      = {1420-8954},
  abstract  = {The main results of this paper are recursion-theoretic characterizations of two parallel complexity classes: the functions computable by uniform bounded fan-in circuit families of log and polylog depth (or equivalently, the functions bitwise computable by alternating Turing machines in log and polylog time). The present characterizations avoid the complex base functions, function constructors, and a priori size or depth bounds typical of previous work on these classes. This simplicity is achieved by extending the “tiered recursion” techniques of Leivant and Bellantoni \& Cook.}
}


@incollection{Cobham1964-COBTIC,
	author = {Alan Cobham},
	booktitle = {Logic, methodology and philosophy of science},
	editor = {Yehoshua Bar{-}Hillel},
	pages = {24--30},
	publisher = {North-Holland Pub. Co.},
	title = {The Intrinsic Computational Difficulty of Functions},
	year = {1964},
  url = {https://web.archive.org/web/20240121142633/https://www.cs.toronto.edu/~sacook/homepage/cobham_intrinsic.pdf}
}


@INPROCEEDINGS{4568079,
  author={Gurevich, Yuri},
  booktitle={24th Annual Symposium on Foundations of Computer Science (sfcs 1983)}, 
  title={Algebras of feasible functions}, 
  year={1983},
  volume={},
  number={},
  pages={210-214},
  keywords={Algebra;Logic;Databases;Computer science},
  doi={10.1109/SFCS.1983.5}}

@article{doi:10.1137/0216051,
author = {Immerman, Neil},
title = {Languages that Capture Complexity Classes},
journal = {SIAM Journal on Computing},
volume = {16},
number = {4},
pages = {760-778},
year = {1987},
doi = {10.1137/0216051},
URL = {https://doi.org/10.1137/0216051},
eprint = {https://doi.org/10.1137/0216051},
    abstract = { We present a series of operators of apparently increasing power which when added to first-order logic produce a series of languages in which exactly the properties checkable in a certain complexity class may be expressed. We thus give alternate characterizations of most important complexity classes. We also introduce reductions appropriate for our setting: first-order translations, and a restricted, quantifier free version of these called projection translations. We show that projection translations are a uniform version of Valiant’s projections, and that the usual complete problems remain complete via these very restrictive reductions. }
}

@article{ALLEN19911,
title = {Arithmetizing Uniform NC},
journal = {Annals of Pure and Applied Logic},
volume = {53},
number = {1},
pages = {1-50},
year = {1991},
issn = {0168-0072},
doi = {https://doi.org/10.1016/0168-0072(91)90057-S},
url = {https://www.sciencedirect.com/science/article/pii/016800729190057S},
author = {Bill Allen},
abstract = {Allen, B., Arithmetizing Uniform NC, Annals of Pure and Applied Logic 53 (1991) 1–50. We give a characterization of the complexity class Uniform NC as an algebra of functions on the natural numbers which is the closure of several basic functions under composition and a schema of recursion. We then define a fragment of bounded arithmetic, and, using our characterization of Uniform NC, show that this fragment is capable of proving the totality of all of the functions in Uniform NC. Lastly, in the spirit of Buss, we show that any function which is definable by a ∑b1-formula in our theory is a function which is in Uniform NC.}
}

@article{COMPTON1990241,
title = {An algebra and a logic for NC1},
journal = {Information and Computation},
volume = {87},
number = {1},
pages = {241-263},
year = {1990},
note = {Special Issue: Selections from 1988 IEEE Symposium on Logic in Computer Science},
issn = {0890-5401},
doi = {https://doi.org/10.1016/0890-5401(90)90063-N},
url = {https://www.sciencedirect.com/science/article/pii/089054019090063N},
author = {Kevin J. Compton and Claude Laflamme},
abstract = {Presented here are an algebra and a logic characterizing the complexity class NC1, which consists of functions computed by uniform families of polynomial size, log depth circuits. In both characterizations, NC1 functions are regarded as functions from one class of finite relational structures to another. In the algebraic characterization a recursion scheme called upward tree recursion is applied to a class of simple functions. In the logical characterization, first-order logic is augmented by an operator for defining relations by primitive recursion where it is assumed that every structure has an underlying relation BIT giving the binary representations of integers.}
}

@INPROCEEDINGS{151625,
  author={Leivant, D.},
  booktitle={[1991] Proceedings Sixth Annual IEEE Symposium on Logic in Computer Science}, 
  title={A foundational delineation of computational feasibility}, 
  year={1991},
  volume={},
  number={},
  pages={2-11},
  keywords={Logic;Polynomials;Quantum computing;H infinity control;Stability;Equations;Head;Automata;Arithmetic;Testing},
  doi={10.1109/LICS.1991.151625}}

@article{10.1007/BF01201998,
author = {Bellantoni, Stephen and Cook, Stephen},
title = {A new recursion-theoretic characterization of the polytime functions},
year = {1992},
issue_date = {1992},
publisher = {Birkhauser Verlag},
address = {CHE},
volume = {2},
number = {2},
issn = {1016-3328},
url = {https://doi.org/10.1007/BF01201998},
doi = {10.1007/BF01201998},
journal = {Comput. Complex.},
month = {dec},
pages = {97–110},
numpages = {14},
keywords = {Cobham, polynomial time, recursion theory}
}

@article{10.1145/1008293.1008295,
author = {Lind, John and Meyer, Albert R.},
title = {A characterization of log-space computable functions},
year = {1973},
issue_date = {July 1973},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {3},
issn = {0163-5700},
url = {https://doi.org/10.1145/1008293.1008295},
doi = {10.1145/1008293.1008295},
journal = {SIGACT News},
month = jul,
pages = {26–29},
numpages = {4}
}

@techreport{lind1974logspace,
  author       = {John C. Lind},
  title        = {Computing in Logarithmic Space},
  institution  = {Massachusetts Institute of Technology, Project MAC},
  type         = {Technical Memo},
  number       = {LCS-TM-052},
  year         = {1974},
  month        = {September},
  note         = {Available from MIT DSpace},
  url          = {https://dspace.mit.edu/handle/1721.1/148880}
}




% MODERN:

@InProceedings{dallago_et_al:LIPIcs.MFCS.2021.35,
  author =	{Dal Lago, Ugo and Kahle, Reinhard and Oitavem, Isabel},
  title =	{{A Recursion-Theoretic Characterization of the Probabilistic Class PP}},
  booktitle =	{46th International Symposium on Mathematical Foundations of Computer Science (MFCS 2021)},
  pages =	{35:1--35:12},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-201-3},
  ISSN =	{1868-8969},
  year =	{2021},
  volume =	{202},
  editor =	{Bonchi, Filippo and Puglisi, Simon J.},
  publisher =	{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.MFCS.2021.35},
  URN =		{urn:nbn:de:0030-drops-144754},
  doi =		{10.4230/LIPIcs.MFCS.2021.35},
  annote =	{Keywords: Implicit complexity, tree-recursion, probabilistic classes, polynomial time, PP}
}

@article{NIGGL201047,
title = {Implicit characterizations of FPTIME and NC revisited},
journal = {The Journal of Logic and Algebraic Programming},
volume = {79},
number = {1},
pages = {47-60},
year = {2010},
note = {Speical Issue: Logic, Computability and Topology in Computer Science: A New Perspective for Old Disciplines},
issn = {1567-8326},
doi = {https://doi.org/10.1016/j.jlap.2009.02.005},
url = {https://www.sciencedirect.com/science/article/pii/S1567832609000113},
author = {Karl-Heinz Niggl and Henning Wunderlich},
keywords = {Bounded and ramified forms of recursion, Function algebra, Implicit computational complexity, NC, Polynomial-time computability},
abstract = {Various simplified or improved, and partly corrected well-known implicit characterizations of the complexity classes FPTIME and NC are presented. Primarily, the interest is in simplifying the required simulations of various recursion schemes in the corresponding (implicit) framework, and in developing those simulations in a more uniform way, based on a step-by-step comparison technique, thus consolidating groundwork in implicit computational complexity.}
}

@misc{lago2012higherordercharacterizationprobabilisticpolynomial,
      title={An Higher-Order Characterization of Probabilistic Polynomial Time (Long Version)}, 
      author={Ugo Dal Lago and Paolo Parisen Toldin},
      year={2012},
      eprint={1202.3317},
      archivePrefix={arXiv},
      primaryClass={cs.LO},
      url={https://arxiv.org/abs/1202.3317}, 
}

@article{10.1016/j.ic.2015.12.009,
author = {Bonfante, Guillaume and Kahle, Reinhard and Marion, Jean-Yves and Oitavem, Isabel},
title = {Two function algebras defining functions in NC k boolean circuits},
year = {2016},
issue_date = {June 2016},
publisher = {Academic Press, Inc.},
address = {USA},
volume = {248},
number = {C},
issn = {0890-5401},
url = {https://doi.org/10.1016/j.ic.2015.12.009},
doi = {10.1016/j.ic.2015.12.009},
abstract = {We describe the functions computed by boolean circuits in NC k by means of functions algebra for k 1 in the spirit of implicit computational complexity. The whole hierarchy defines NC . In other words, we give a recursion-theoretic characterization of the complexity classes NC k for k 1 without reference to a machine model, nor explicit bounds in the recursion schema. Actually, we give two equivalent descriptions of the classes NC k , k 1 . One is based on a tree structure \`{a} la Leivant, the other is based on words. This latter puts into light the role of computation of pointers in circuit complexity. We show that transducers are a key concept for pointer evaluation.},
journal = {Inf. Comput.},
month = jun,
pages = {82–103},
numpages = {22},
keywords = {Transducers, Parallel computation class, NC k, Boolean circuits}
}


@article{JONES1999151,
title = {LOGSPACE and PTIME characterized by programming languages},
journal = {Theoretical Computer Science},
volume = {228},
number = {1},
pages = {151-174},
year = {1999},
issn = {0304-3975},
doi = {https://doi.org/10.1016/S0304-3975(98)00357-0},
url = {https://www.sciencedirect.com/science/article/pii/S0304397598003570},
author = {Neil D. Jones},
keywords = {Complexity, Read-only or cons-free programs, , },
abstract = {A programming approach to computability and complexity theory yields more natural definitions and proofs of central results than the classical approach. Further, some new results can be obtained using this viewpoint. This paper contains new intrinsic characterizations of the well-known complexity classes PTIME and LOGSPACE, with no externally imposed resource bounds on time or space. LOGSPACE is proven identical with the decision problems solvable by read-only imperative programs on Lisp-like lists; and PTIME is proven identical with the problems solvable by recursive read-only programs.}
}

@InProceedings{10.1007/11784180_8,
author="Bonfante, Guillaume",
editor="Johnson, Michael
and Vene, Varmo",
title="Some Programming Languages for Logspace and Ptime",
booktitle="Algebraic Methodology and Software Technology",
year="2006",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="66--80",
abstract="We propose two characterizations of complexity classes by means of programming languages. The first concerns Logspace while the second leads to Ptime. This latter characterization shows that adding a choice command to a Ptime language (the language WHILE of Jones [1]) may not necessarily provide NPtime computations. The result is close to Cook in [2] who used ``auxiliary push-down automata''. Logspace is obtained through a decidable mechanism of tiering. It is based on an analysis of deforestation due to Wadler in [3]. We get also a characterization of NLogspace.",
isbn="978-3-540-35636-3"
}

@article{kristiansenvoda2005,
author = {Kristiansen, Lars and Voda, Paul J.},
title = {Programming languages capturing complexity classes},
year = {2005},
issue_date = {April 2005},
publisher = {Publishing Association Nordic Journal of Computing},
url = {https://www.researchgate.net/publication/220673222_Programming_Languages_Capturing_Complexity_Classes},
address = {FIN},
volume = {12},
number = {2},
issn = {1236-6064},
abstract = {We investigate an imperative and a functional programming language. The computational power of fragments of these languages induce two hierarchies of complexity classes. Our first main theorem says that these hierarchies match, level by level, a complexity-theoretic alternating space-time hierarchy known from the literature. Our second main theorems says that a slightly different complexity-theoretic hierarchy (the Goerdt-Seidl hierarchy) also can be captured by hierarchies induced by fragments of the programming languages. Well known complexity classes like LOGSPACE, LINSPACE, P, PSPACE, etc., occur in the hierarchies.},
journal = {Nordic J. of Computing},
month = {apr},
pages = {89–115},
numpages = {27},
keywords = {complexity classes, computational complexity, higher types, imperative and functional programming languages, typed λ-calculi}
}


@misc{hofmann2006logspace,
  author       = {Martin Hofmann},
  title        = {Programming Languages for Logarithmic Space},
  howpublished = {Presentation at GEOCAL ’06, Spitalfields Day, Luminy},
  institution  = {LMU München},
  year         = {2006},
  month        = {February 13},
  note         = {Geometric Complexity and Language (GEOCAL) Workshop},
  url          = {https://web.archive.org/web/20240714044259/https://www-lipn.univ-paris13.fr/~baillot/GEOCAL06/SLIDES/Hofmann1302.pdf}
}

@misc{schoepp2006spaceefficiency,
  author       = {Ulrich Schöpp},
  title        = {Space-efficiency and the Geometry of Interaction},
  howpublished = {Presentation at GEOCAL ’06, Luminy},
  institution  = {Ludwig-Maximilians-Universität München},
  year         = {2006},
  month        = {February 16},
  note         = {Part of the GEOCAL workshop series},
  url          = {https://web.archive.org/web/20240507113929/https://www-lipn.univ-paris13.fr/~baillot/GEOCAL06/SLIDES/Schoepp.pdf}
}

@article{kristiansen2005neat,
  author    = {Lars Kristiansen},
  title     = {Neat function algebraic characterizations of logspace and linspace},
  journal   = {Computational Complexity},
  volume    = {14},
  number    = {1},
  pages     = {72--88},
  year      = {2005},
  month     = apr,
  doi       = {10.1007/s00037-005-0191-0},
  url       = {https://doi.org/10.1007/s00037-005-0191-0},
  issn      = {1420-8954},
  abstract  = {We characterize complexity classes by function algebras that neither contain bounds nor any kind of variable segregation. The class of languages decidable in logarithmic space is characterized by the closure of a neat class of initial functions (projections and constants) under composition and simultaneous recursion on notation. We give a similar characterization of the class of number-theoretic 0–1 valued functions computable in linear space using simultaneous recursion on natural numbers in place of simultaneous recursion on notation.}
}

@inbook{Oitavem+2010+355+362,
url = {https://doi.org/10.1515/9783110324907.355},
title = {Logspace without Bounds},
booktitle = {Ways of Proof Theory},
author = {Isabel Oitavem},
editor = {Ralf Schindler},
publisher = {De Gruyter},
address = {Berlin, Boston},
pages = {355--362},
doi = {doi:10.1515/9783110324907.355},
isbn = {9783110324907},
year = {2010},
lastchecked = {2025-08-27}
}


% INTRO
@inproceedings{martini2006implicit1,
  author       = {Simone Martini},
  title        = {Implicit Computational Complexity, part 1},
  booktitle    = {Bertinoro International Spring School for Graduate Studies in Computer Science},
  year         = {2006},
  address      = {Bertinoro, Italy},
  institution  = {Universit\`a di Bologna, Dipartimento di Scienze dell’Informazione},
  month        = {March},
  url          = {http://web.archive.org/web/20240722203715/https://www.cs.unibo.it/~martini/BISS/martini-1.pdf},
  note         = {Accessed: 26 August 2025}
}
@inproceedings{martini2006implicit2,
  author       = {Simone Martini},
  title        = {Implicit Computational Complexity, part 2},
  booktitle    = {Bertinoro International Spring School for Graduate Studies in Computer Science},
  year         = {2006},
  address      = {Bertinoro, Italy},
  institution  = {Universit\`a di Bologna, Dipartimento di Scienze dell’Informazione},
  month        = {March},
  url          = {http://web.archive.org/web/20240807183053/http://www.cs.unibo.it/~martini/BISS/martini-2.pdf},
  note         = {Accessed: 26 August 2025}
}
@inproceedings{martini2006implicit3,
  author       = {Simone Martini},
  title        = {Implicit Computational Complexity, part 3},
  booktitle    = {Bertinoro International Spring School for Graduate Studies in Computer Science},
  year         = {2006},
  address      = {Bertinoro, Italy},
  institution  = {Universit\`a di Bologna, Dipartimento di Scienze dell’Informazione},
  month        = {March},
  url          = {http://web.archive.org/web/20240416100620/http://www.cs.unibo.it/~martini/BISS/martini-3.pdf},
  note         = {Accessed: 26 August 2025}
}

@inproceedings{ronchi2019logic,
  author       = {Simona Ronchi Della Rocca},
  title        = {Logic and Implicit Computational Complexity},
  booktitle    = {12th Panhellenic Logic Symposium},
  year         = {2019},
  address      = {Anogeia, Crete, Greece},
  month        = {June},
  day          = {26--30},
  institution  = {Universit\`a degli Studi di Torino},
  note         = {Emerita Professor},
  url          = {http://web.archive.org/web/20240711151956/http://panhellenic-logic-symposium.org/12/slides/Day1_Ronchi.pdf},
  urldate      = {2025-08-26}
}

@Inbook{DalLago2012,
author="Dal Lago, Ugo",
editor="Bezhanishvili, Nick
and Goranko, Valentin",
title="A Short Introduction to Implicit Computational Complexity",
bookTitle="Lectures on Logic and Computation: ESSLLI 2010 Copenhagen, Denmark, August 2010, ESSLLI 2011, Ljubljana, Slovenia, August 2011, Selected Lecture Notes",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="89--109",
abstract="These lecture notes are meant to serve as a short introduction to implicit computational complexity for those students who have little or no knowledge of recursion theory and proof theory. They have been obtained by enriching and polishing a set of notes the author wrote for a course (on the same subject) he gave at ESSLLI 2010. These notes are definitely not meant to be comprehensive nor exhaustive, but on the other hand much effort has been done to keep them self-contained.",
isbn="978-3-642-31485-8",
doi="10.1007/978-3-642-31485-8_3",
url="https://doi.org/10.1007/978-3-642-31485-8_3"
}

@misc{dawar2012syntactic,
  author       = {Anuj Dawar},
  title        = {On Syntactic and Semantic Complexity Classes},
  howpublished = {Presentation at the Spitalfields Day, Isaac Newton Institute},
  institution  = {University of Cambridge Computer Laboratory},
  year         = {2012},
  month        = {January 9},
  note         = {Available online via Newton Institute archive},
  url          = {https://web.archive.org/web/20210515020503/https://www.newton.ac.uk/files/seminar/20120109163017301-152985.pdf}
}


% COMPLETE
@article{COOK19852,
title = {A taxonomy of problems with fast parallel algorithms},
journal = {Information and Control},
volume = {64},
number = {1},
pages = {2-22},
year = {1985},
note = {International Conference on Foundations of Computation Theory},
issn = {0019-9958},
doi = {https://doi.org/10.1016/S0019-9958(85)80041-3},
url = {https://www.sciencedirect.com/science/article/pii/S0019995885800413},
eprint = {https://web.archive.org/web/20190320200248/https://core.ac.uk/download/pdf/81978561.pdf},
author = {Stephen A. Cook},
abstract = {The class NC consists of problems solvable very fast (in time polynomial in log n) in parallel with a feasible (polynomial) number of processors. Many natural problems in NC are known; in this paper an attempt is made to identify important subclasses of NC and give interesting examples in each subclass. The notion of NC1-reducibility is introduced and used throughout (problem R is NC1-reducible to problem S if R can be solved with uniform log-depth circuits using oracles for S). Problems complete with respect to this reducibility are given for many of the subclasses of NC. A general technique, the “parallel greedy algorithm,” is identified and used to show that finding a minimum spanning forest of a graph is reducible to the graph accessibility problem and hence is in NC2 (solvable by uniform Boolean circuits of depth O(log2 n) and polynomial size). The class LOGCFL is given a new characterization in terms of circuit families. The class DET of problems reducible to integer determinants is defined and many examples given. A new problem complete for deterministic polynomial time is given, namely, finding the lexicographically first maximal clique in a graph. This paper is a revised version of S. A. Cook, (1983, in “Proceedings 1983 Intl. Found. Comut. Sci. Conf.,” Lecture Notes in Computer Science Vol. 158, pp. 78–93, Springer-Verlag, Berlin/New York).}
}

@article{10.1007/BF00289513,
author = {Hartmanis, Juris},
title = {On non-determinancy in simple computing devices},
year = {1972},
issue_date = {December  1972},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {1},
number = {4},
issn = {0001-5903},
url = {https://doi.org/10.1007/BF00289513},
doi = {10.1007/BF00289513},
abstract = {This paper studies one-tape Turing machines with k read-only heads which are restricted to the original input. The main result shows that if any set accepted by such a 3-head non-deterministic Turing machine can be accepted by a deterministic Turing machine with more read-only heads, then the deterministic and non-deterministic context-sensitive languages are identical. Several related results are derived and some tantalizing open problems are discussed.},
journal = {Acta Inf.},
month = dec,
pages = {336–344},
numpages = {9}
}

@MISC {423885,
    TITLE = {Multi-head two-way finite automata versus logarithmic space},
    AUTHOR = {Damiano Mazza (https://mathoverflow.net/users/45027/damiano-mazza)},
    HOWPUBLISHED = {MathOverflow},
    NOTE = {URL:https://mathoverflow.net/q/423885 (version: 2022-06-03)},
    EPRINT = {https://mathoverflow.net/q/423885},
    URL = {https://mathoverflow.net/q/423885}
}


% LOGSPACE:
@inproceedings{murawski2000can,
  title={Can safe recursion be interpreted in light logic},
  author={Murawski, Andrzej S and Ong, CHL},
  booktitle={Second International Workshop on Implicit Computational Complexity},
  year={2000}
}

@article{MURAWSKI2004197,
title = {On an interpretation of safe recursion in light affine logic},
journal = {Theoretical Computer Science},
volume = {318},
number = {1},
pages = {197-223},
year = {2004},
note = {Implicit Computational Complexity},
issn = {0304-3975},
doi = {https://doi.org/10.1016/j.tcs.2003.10.017},
url = {https://www.sciencedirect.com/science/article/pii/S030439750300522X},
author = {A.S. Murawski and C.-H.L. Ong},
keywords = {Computational complexity, Light affine logic, Polynomial-time computability},
abstract = {We introduce a subalgebra BC− of Bellantoni and Cook's safe-recursion function algebra BC. Functions of the subalgebra have safe arguments that are non-contractible (i.e non-duplicable). We propose a definition of safe and normal variables in light affine logic (LAL), and show that BC− is the largest subalgebra that is interpretable in LAL, relative to that definition. Though BC− itself is not PF complete, there are extensions of it (by additional schemes for defining functions with safe arguments) that are, and are still interpretable in LAL and so preserve PF closure. We focus on one such which is BC− augmented by a definition-by-cases construct and a restricted form of definition-by-recursion scheme over safe arguments. As a corollary we obtain a new proof of the PF completeness of LAL.}
}

@InProceedings{10.1007/978-3-540-30477-7_21,
author="Neergaard, Peter M{\o}ller",
editor="Chin, Wei-Ngan",
title="A Functional Language for Logarithmic Space",
booktitle="Programming Languages and Systems",
year="2004",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="311--326",
abstract="More than being just a tool for expressing algorithms, a well-designed programming language allows the user to express her ideas efficiently. The design choices however effect the efficiency of the algorithms written in the languages. It is therefore important to understand how such choices effect the expressibility of programming languages.",
isbn="978-3-540-30477-7",
url="https://doi.org/10.1007/978-3-540-30477-7_21"
}

% PTIME:



@MISC {3074,
    TITLE = {A category of NP-complete problems?},
    AUTHOR = {Paul Allen Grubbs (https://cstheory.stackexchange.com/users/2267/paul-allen-grubbs)},
    HOWPUBLISHED = {Theoretical Computer Science Stack Exchange},
    NOTE = {URL:https://cstheory.stackexchange.com/q/3074 (version: 2010-11-17)},
    EPRINT = {https://cstheory.stackexchange.com/q/3074},
    URL = {https://cstheory.stackexchange.com/q/3074}
}

@MISC {3422,
    TITLE = {A category of NP-complete problems?},
    AUTHOR = {Neel Krishnaswami (https://cstheory.stackexchange.com/users/657/neel-krishnaswami)},
    HOWPUBLISHED = {Theoretical Computer Science Stack Exchange},
    NOTE = {URL:https://cstheory.stackexchange.com/q/3422 (version: 2010-11-30)},
    EPRINT = {https://cstheory.stackexchange.com/q/3422},
    URL = {https://cstheory.stackexchange.com/q/3422}
}

@misc{nlab:computational_trilogy,
  author = {{nLab authors}},
  title = {computational trilogy},
  howpublished = {\url{https://ncatlab.org/nlab/show/computational+trilogy}},
  note = {\href{https://ncatlab.org/nlab/revision/computational+trilogy/42}{Revision 42}},
  month = aug,
  year = 2025
}

@misc{nlab:relation_between_type_theory_and_category_theory,
  author = {{nLab authors}},
  title = {relation between type theory and category theory},
  howpublished = {\url{https://ncatlab.org/nlab/show/relation+between+type+theory+and+category+theory}},
  note = {\href{https://ncatlab.org/nlab/revision/relation+between+type+theory+and+category+theory/92}{Revision 92}},
  month = aug,
  year = 2025
}

@misc{nlab:internal_logic,
  author = {{nLab authors}},
  title = {internal logic},
  howpublished = {\url{https://ncatlab.org/nlab/show/internal+logic}},
  note = {\href{https://ncatlab.org/nlab/revision/internal+logic/83}{Revision 83}},
  month = aug,
  year = 2025
}


% BOUNDED ARITHMETIC
@book{buss1986bounded,
  title={Bounded arithmetic},
  author={Buss, Samuel R},
  year={1986},
  publisher={Princeton University}
}


@InProceedings{10.1007/978-1-4612-2566-9_6,
author="Clote, Peter
and Takeuti, Gaisi",
editor="Clote, Peter
and Remmel, Jeffrey B.",
title="First Order Bounded Arithmetic and Small Boolean Circuit Complexity Classes",
booktitle="Feasible Mathematics II",
year="1995",
publisher="Birkh{\"a}user Boston",
address="Boston, MA",
pages="154--218",
abstract="A well known result of proof theory is the characterization of primitive recursive functions {\textflorin} as those provably recursive in the first order theory of Peano arithmetic with the induction axiom restricted to $\Sigma$1 formulas. In this paper, we study a variety of weak theories of first order arithmetic, whose provably total functions (with graphs of a certain form) are exactly those computable within some resource bound on a particular computation model (boolean circuits, with possible parity or MOD 6 gates, or threshold circuits, or alternating Turing machines, or ordinary Turing machines). To establish these kinds of results for small complexity classes, we provide a recursion-theoretic characterization of the complexity class, prove how one can encode sequences in very weak theories, and use the witnessing technique of [7].",
isbn="978-1-4612-2566-9"
}

